{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/EmptyGifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","components/LittleGiphyIcon.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","type","placeholder","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","response","json","data","gifs","map","gif","id","title","images","fixed_height","GifGridItem","img","className","src","alt","EmptyGifGridItem","GifGrid","loading","dataLength","state","setState","useEffect","then","imgs","setTimeout","useFetchGifs","key","LittleGiphyIcon","href","rel","GifExpertApp","element","ReactDOM","render","document","getElementById"],"mappings":"6MAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEdC,mBAAS,IAFK,mBAE3CC,EAF2C,KAE/BC,EAF+B,KAiB9C,OACI,0BAAMC,SAVO,SAACC,GAClBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAc,SAAES,GAAF,OAAmBP,GAAnB,mBAAkCO,OAChDN,EAAc,OAMV,2BACIO,KAAK,OACLC,YAAY,0BACZC,MAASV,EACTW,SAnBU,SAACR,GACvBF,EAAcE,EAAES,OAAOF,Y,uBCPdG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,iDAEoCC,UAAWH,GAF/C,+DAIII,MAAMF,GAJV,cAIbG,EAJa,gBAKIA,EAASC,OALb,uBAKXC,EALW,EAKXA,KAEFC,EAAOD,EAAKE,KAAK,SAAEC,GAAU,IAAD,EAC9B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,aAAaZ,QAXnB,kBAeZM,GAfY,4CAAH,sDCCPO,EAAc,SAAC,GAAa,IAAXC,EAAU,EAAVA,IAE1B,OACI,yBAAKC,UAAU,8CACX,yBAAKC,IAAMF,EAAId,IAAMiB,IAAMH,EAAIJ,QAC/B,2BAAKI,EAAIJ,SCLRQ,EAAmB,SAAC,GAAkB,IAAhBpB,EAAe,EAAfA,SAE/B,OACI,yBAAKiB,UAAU,kDACX,2DAAgC,8BAAQjB,GAAxC,aCDCqB,EAAU,SAAC,GAAkB,IAAhBrB,EAAe,EAAfA,SAAe,ECFb,SAAEA,GAAe,IAAD,EACdf,mBAAS,CAC/BsB,KAAM,GACNe,SAAS,EACTC,WAAY,IAJwB,mBACjCC,EADiC,KAC1BC,EAD0B,KAkBxC,OAXAC,qBAAW,WACP3B,EAASC,GACJ2B,MAAK,SAACC,GAAWC,YAAW,WACzBJ,EAAS,CACLlB,KAAMqB,EACNN,SAAS,EACTC,WAAYK,EAAKpC,WAEtB,UACR,CAAEQ,IAEEwB,EDdsCM,CAAc9B,GAA9Ca,EAFwB,EAE7BN,KAAae,EAFgB,EAEhBA,QAASC,EAFO,EAEPA,WAE9B,OACI,6BACI,wBAAIN,UAAU,qCAAsCjB,GAElDsB,GAAW,uBAAGL,UAAU,oCAAb,cACXM,EAAa,IAAiB,IAAZD,GAAqB,kBAAC,EAAD,CAAkBtB,SAAWA,IAEtE,yBAAKiB,UAAU,aACTJ,EAAOJ,KAAI,SAAEO,GAAF,OAAW,kBAAC,EAAD,CAAae,IAAMf,EAAIL,GAAKK,IAAMA,UEf7DgB,EAAkB,WAI3B,OACI,6BACI,yBAAKf,UAAU,+CACX,uBAAGgB,KAAK,gCAAgCd,IAAI,GAAGrB,OAAO,SAASoC,IAAI,uBAC/D,iDACA,yBAAKjB,UAAU,cAAa,yBAAKC,IAP3B,+HAOiDC,IAAI,QAGnE,gDCMGgB,EAfM,WAAO,IAAD,EAEalD,mBAAS,CAAC,WAFvB,mBAEhBQ,EAFgB,KAEJT,EAFI,KAIvB,OACI,oCACI,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAaA,cAAiBA,IAC9B,6BAEA,4BAAMS,EAAWgB,KAAK,SAAC2B,GAAD,OAAa,kBAAC,EAAD,CAASL,IAAMK,EAAUpC,SAAWoC,UCVnFC,IAASC,OAAQ,kBAAC,EAAD,MACfC,SAASC,eAAe,U","file":"static/js/main.d943b96c.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n\r\nconst [inputValue, setInputValue] = useState(\"\");\r\n\r\nconst handleInputChange = (e) => {\r\n    setInputValue(e.target.value);\r\n}\r\n\r\nconst handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    if(inputValue.trim().length > 2) {\r\n        setCategories(( categories ) => [inputValue, ...categories]);\r\n        setInputValue(\"\");\r\n    }\r\n}\r\n\r\n    return (\r\n        <form onSubmit={ handleSubmit }>\r\n            <input\r\n                type=\"text\"\r\n                placeholder=\"Type about something...\"\r\n                value= { inputValue }\r\n                onChange= { handleInputChange }\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired,\r\n}\r\n","\r\nexport const getGifs = async (category) => {\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=10&api_key=LVNNSPAPr5wM2zIKLkGNlU3jWvZ9BdMA`;\r\n\r\n    const response = await fetch(url);\r\n    const { data } = await response.json();\r\n\r\n    const gifs = data.map( ( gif ) => {\r\n        return {\r\n            id: gif.id,\r\n            title: gif.title,\r\n            url: gif.images?.fixed_height.url,\r\n        }\r\n    })\r\n\r\n    return gifs;\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({ img }) => {\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__backInLeft\">\r\n            <img src={ img.url } alt={ img.title } />\r\n            <p>{ img.title }</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport const EmptyGifGridItem = ({ category }) => {\r\n\r\n    return (\r\n        <div className=\"notFoundCard animate__animated animate__fadeIn\">\r\n            <p>No GIFS where found from the <span>{ category }</span> search</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\nimport { EmptyGifGridItem } from './EmptyGifGridItem';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n    const { data:images, loading, dataLength } = useFetchGifs( category );\r\n\r\n    return (\r\n        <div>\r\n            <h3 className=\"animate__animated animate__fadeIn\">{ category }</h3>\r\n            \r\n            { loading && <p className=\"animate__animated animate__flash\">Loading...</p> }\r\n            { dataLength < 1 && loading === false && <EmptyGifGridItem category={ category } /> }\r\n\r\n            <div className=\"card-grid\">\r\n                { images.map(( img ) => <GifGridItem key={ img.id } img={ img } /> )}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import { useState, useEffect } from 'react';\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true,\r\n        dataLength: 0\r\n    });\r\n\r\n    useEffect( () => {\r\n        getGifs (category)\r\n            .then((imgs) => { setTimeout(() => {\r\n                setState({\r\n                    data: imgs,\r\n                    loading: false,\r\n                    dataLength: imgs.length\r\n                });\r\n            }, 550)});\r\n    }, [ category ]);\r\n\r\n    return state;\r\n}\r\n","import React from 'react';\r\n\r\nexport const LittleGiphyIcon = () => {\r\n\r\n    const littleIconUrl = \"https://media0.giphy.com/media/3xz2BDFvxop2BfAQoM/100w.gif?cid=6f54fedeoerrqrxeblu5mj93k2ryzyd366dbj9sca30ajebk&rid=100w.gif\";\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"small animate__animated animate__backInDown\">\r\n                <a href=\"https://developers.giphy.com/\" alt=\"\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                    <div>Powered by GIPHY</div>\r\n                    <div className=\"extraSmall\"><img src={ littleIconUrl } alt=\"\"></img></div>\r\n                </a>\r\n            </div>\r\n            <h2>Gif Expert App</h2>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\nimport { LittleGiphyIcon } from './components/LittleGiphyIcon';\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState([\"Marvel\"]);\r\n\r\n    return (\r\n        <>  \r\n            <LittleGiphyIcon />\r\n            <AddCategory setCategories= { setCategories }/>\r\n            <hr />\r\n\r\n            <ol>{ categories.map( (element) => <GifGrid key={ element } category={ element }/>) }</ol>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default GifExpertApp;\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './GifExpertApp';\n\nReactDOM.render( <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}